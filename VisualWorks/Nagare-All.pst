<?xml version="1.0"?><st-source><!-- Name: Nagare-AllBundleName: Nagare-AllBundleStructure: a Store.BundleForParcelComment: ** Nagare logger for VisualWorks **Nagare is a new flexible logger which connects to fluentd (http://fluentd.org). - Simple log interfaces with reliable backend - Semi-structured logging (Not only String, you can store structured records in log)- Portable (runs on VW, Squeak, and Pharo)Prerequisites: MessagePack, (for storing more complex domain objects, you also need StOMP)This bundle includes core runtime & test cases. Copyright (C) 2012- Masashi UmezawaDevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'MessagePack-Runtime' '') #(#any 'StOMP-Runtime' ''))Parcel: nilParcelName: Nagare-AllPrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package) #(#name 'MessagePack-Runtime' #componentType #bundle) #(#name 'StOMP-Runtime' #componentType #bundle))PrerequisiteParcels: #(#('SUnitToo' '') #('MessagePack-Runtime' '') #('StOMP-Runtime' ''))Version: 1.1Date: 11:38:56 PM May 6, 2012 --><time-stamp>From VisualWorks®, 7.8 of 2011年3月30日 on 2012年5月6日 at 23:38:56</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>NgPortableUtil</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>heartbeatProcess </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Nagare-Core</category><attributes><package>Nagare-Core</package></attributes></class><class><name>NgVwPortableUtil</name><environment>Smalltalk</environment><super>NgPortableUtil</super><private>false</private><indexed-type>none</indexed-type><inst-vars>socketStream udpSocket </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Nagare-Squeak-Core</category><attributes><package>Nagare-VW-Core</package></attributes></class><class><name>NgMockPortableUtil</name><environment>Smalltalk</environment><super>NgPortableUtil</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delegate bytesSent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>NagareTest-Core</category><attributes><package>NagareTest-Core</package></attributes></class><class><name>NgSettings</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>settingsDict </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Nagare-Core</category><attributes><package>Nagare-Core</package></attributes></class><class><name>NgLogPolicy</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>logger </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Nagare-Core</category><attributes><package>Nagare-Core</package></attributes></class><class><name>NgNetworkError</name><environment>Smalltalk</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars>originalError </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Nagare-Core</category><attributes><package>Nagare-Core</package></attributes></class><class><name>NgLogFactory</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>loggers </class-inst-vars><imports></imports><category>Nagare-Core</category><attributes><package>Nagare-Core</package></attributes></class><class><name>NgLog</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policy settings tagPrefix accessTag adminTag debugTag fatalTag infoTag perfTag errorTag warnTag </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Nagare-Core</category><attributes><package>Nagare-Core</package></attributes></class><class><name>NgLogTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>NagareTest-Core</category><attributes><package>NagareTest-Core</package></attributes></class><shared-variable><name>ActualClass</name><environment>NgPortableUtil</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Nagare-Core</package></attributes></shared-variable><methods><class-id>NgPortableUtil</class-id> <category>accessing</category><body package="Nagare-Core" selector="heartbeatProcess">heartbeatProcess	heartbeatProcess ifNil: [self prepareHeartbeatProcess].	^ heartbeatProcess</body><body package="Nagare-Core" selector="heartbeatProcess:">heartbeatProcess: anObject	"Set the value of heartbeatProcess"	heartbeatProcess := anObject</body><body package="Nagare-Core" selector="settings">settings	^ NgSettings default</body><body package="Nagare-Core" selector="unixTimeSeconds">unixTimeSeconds	"override"	^ 0</body></methods><methods><class-id>NgPortableUtil</class-id> <category>shutdown</category><body package="Nagare-Core" selector="listenSystemShutdownEvent">listenSystemShutdownEvent	"override"	"SmalltalkImage current addToShutDownList: self class"</body></methods><methods><class-id>NgPortableUtil</class-id> <category>converting</category><body package="Nagare-Core" selector="asRecord:">asRecord: anObject	anObject class = Association ifTrue: [^ self dictionaryFromAssociations: (Array with: anObject)].	(anObject class = Array and: [anObject notEmpty and: [(anObject at: 1) class = Association]])		ifTrue: [^ self dictionaryFromAssociations: anObject].	^anObject</body><body package="Nagare-Core" selector="dictionaryFromAssociations:">dictionaryFromAssociations: assocs	| dict |	dict := Dictionary new: assocs size.	dict addAll: assocs.	^ dict</body><body package="Nagare-Core" selector="errorRecordFrom:">errorRecordFrom: anException	| dic |	(self isException: anException) ifFalse: [^anException].	dic := Dictionary new.	dic at: #receiver put: (self limitedStringFrom: anException receiver).		dic at: #description put: (self limitedStringFrom: anException description).	dic at: #stack put:  (self shortStackStringFrom: anException).		^dic</body><body package="Nagare-Core" selector="limitedStringFrom:">limitedStringFrom: anObject	| str limitedStringSize |	str := anObject isString ifTrue: [anObject] ifFalse: [anObject printString].	limitedStringSize := self settings limitedStringSize.	(str isEmpty or: [str size &lt;= limitedStringSize]) ifTrue: [^str].	^str copyFrom: 1 to: limitedStringSize</body><body package="Nagare-Core" selector="shortStackStringFrom:">shortStackStringFrom: anException	^self subclassResponsibility </body></methods><methods><class-id>NgPortableUtil</class-id> <category>sending</category><body package="Nagare-Core" selector="sendBytes:">sendBytes: bytes	"override"</body><body package="Nagare-Core" selector="sendLog:tagged:on:">sendLog: record tagged: tag on: logger	| bytes |	bytes := logger bytesToSendFrom: record tagged: tag.	^self sendBytes: bytes</body></methods><methods><class-id>NgPortableUtil</class-id> <category>private</category><body package="Nagare-Core" selector="hearbeatTo:port:">hearbeatTo: host port: port	"override"	"| udpSock |	udpSock := Socket newUDP.	udpSock sendData: '' toHost: host port: port."</body><body package="Nagare-Core" selector="isException:">isException: anException	^ anException isKindOf: Exception</body><body package="Nagare-Core" selector="prepareHeartbeatProcess">prepareHeartbeatProcess	| port host process |	host := self settings host.	port := self settings port.	process := [		[self hearbeatTo: host port: port.		(Delay forSeconds: self settings heartbeatInterval) wait] repeat.	] newProcess.	process priority: Processor userBackgroundPriority.	process resume.		self heartbeatProcess: process</body><body package="Nagare-Core" selector="releaseHeartbeatProcess">releaseHeartbeatProcess	self heartbeatProcess ifNil: [^self].	self heartbeatProcess terminate.	self heartbeatProcess: nil</body></methods><methods><class-id>NgPortableUtil</class-id> <category>initialize-release</category><body package="Nagare-Core" selector="initialize">initialize	self listenSystemShutdownEvent.	self prepareHeartbeatProcess</body><body package="Nagare-Core" selector="release">release	self releaseHeartbeatProcess</body></methods><methods><class-id>NgPortableUtil class</class-id> <category>private</category><body package="Nagare-Core" selector="activate">activate	ActualClass := self.	^ActualClass</body></methods><methods><class-id>NgPortableUtil class</class-id> <category>accessing</category><body package="Nagare-Core" selector="actualClass">actualClass	^ActualClass ifNil: [self defaultActualClass]</body><body package="Nagare-Core" selector="defaultActualClass">defaultActualClass	^(NgPortableUtil subclasses reject: [:each | '*Mock*' match: each name]) at: 1</body></methods><methods><class-id>NgPortableUtil class</class-id> <category>instance creation</category><body package="Nagare-Core" selector="default">default	default ifNil: [default := self actualClass activate new].	^ default</body><body package="Nagare-VW-Core" selector="new">new	^super new initialize</body></methods><methods><class-id>NgPortableUtil class</class-id> <category>class initialization</category><body package="Nagare-Core" selector="initDefault">initDefault	default := nil</body><body package="Nagare-Core" selector="initialize">initialize	"override"</body><body package="Nagare-Core" selector="release">release	"NgPortableUtil release"	default ifNotNil: [default release].	self initDefault.	NgLogFactory initialize.</body></methods><methods><class-id>NgVwPortableUtil</class-id> <category>private</category><body package="Nagare-VW-Core" selector="hearbeatTo:port:">hearbeatTo: host port: port	| address udpSock |	address := IPSocketAddress hostName: host port: port.	udpSock := self udpSocket.	udpSock sendTo: address buffer: ''</body><body package="Nagare-VW-Core" selector="prepareSocketStream">prepareSocketStream	| socket connection strm |	socket := SocketAccessor newTCPclientToHost: self settings host port: self settings port.	connection := ExternalConnection ioAccessor: socket.	strm := (connection withEncoding: #binary) writeStream.	self socketStream: strm</body><body package="Nagare-VW-Core" selector="printSenderStackOn:of:">printSenderStackOn: aStream of: aContext	| count ctx |	count := 0.	ctx := aContext.	[count &lt; 20 and: [ctx notNil]] whileTrue: 			[ctx printOn: aStream.			aStream nextPutAll: '\'.			count := count + 1.			ctx := ctx sender]</body><body package="Nagare-VW-Core" selector="releaseHeartbeatProcess">releaseHeartbeatProcess	super releaseHeartbeatProcess.	udpSocket		ifNotNil: 			[udpSocket close.			udpSocket := nil]</body><body package="Nagare-VW-Core" selector="releaseSocketStream">releaseSocketStream	self socketStream ifNil: [^self].	self socketStream close.	self socketStream: nil</body></methods><methods><class-id>NgVwPortableUtil</class-id> <category>shutdown</category><body package="Nagare-VW-Core" selector="listenSystemShutdownEvent">listenSystemShutdownEvent	| cls |	cls := self class.	(ObjectMemory dependents includes: cls) ifFalse: [		ObjectMemory addDependent: self class	]</body></methods><methods><class-id>NgVwPortableUtil</class-id> <category>accessing</category><body package="Nagare-VW-Core" selector="ensuredSocketStream">ensuredSocketStream	self socketStream isNil		ifTrue: [self prepareSocketStream]		ifFalse: [self socketStream ioConnection isActive				ifFalse: [self releaseSocketStream; prepareSocketStream]].	^ self socketStream</body><body package="Nagare-VW-Core" selector="socketStream">socketStream	"Answer the value of socketStream"	^ socketStream</body><body package="Nagare-VW-Core" selector="socketStream:">socketStream: anObject	"Set the value of socketStream"	socketStream := anObject</body><body package="Nagare-VW-Core" selector="udpSocket">udpSocket	^udpSocket ifNil: [udpSocket := SocketAccessor newUDP]</body><body package="Nagare-VW-Core" selector="udpSocket:">udpSocket: anObject	udpSocket := anObject</body><body package="Nagare-VW-Core" selector="unixTimeSeconds">unixTimeSeconds	"Timestamp fromSeconds: 2177452800 ==&gt; Unix epoch"	^Timestamp nowUTC asSeconds - 2177452800</body></methods><methods><class-id>NgVwPortableUtil</class-id> <category>sending</category><body package="Nagare-VW-Core" selector="sendBytes:">sendBytes: bytes	[self ensuredSocketStream nextPutAll: bytes; commit] on: OsError do: [:ex |		(NgNetworkError originalError: ex) raise	]</body></methods><methods><class-id>NgVwPortableUtil</class-id> <category>initialize-release</category><body package="Nagare-VW-Core" selector="release">release	self releaseSocketStream.	super release	</body></methods><methods><class-id>NgVwPortableUtil</class-id> <category>converting</category><body package="Nagare-VW-Core" selector="errorRecordFrom:">errorRecordFrom: anException	| dic |	(self isException: anException) ifFalse: [^anException].	dic := Dictionary new.	dic at: #receiver put: (self limitedStringFrom: anException initialContext receiver).		dic at: #description put: (self limitedStringFrom: anException description).	dic at: #stack put:  (self shortStackStringFrom: anException).		^dic</body><body package="Nagare-VW-Core" selector="shortStackStringFrom:">shortStackStringFrom: anException 	| ctx strm |	ctx := anException initialContext.	strm := WriteStream on: String new.	self printSenderStackOn: strm of: ctx.	^strm contents</body></methods><methods><class-id>NgVwPortableUtil class</class-id> <category>shutdown</category><body package="Nagare-VW-Core" selector="shutDown:">shutDown: quitting	quitting ifTrue: [self release].</body></methods><methods><class-id>NgVwPortableUtil class</class-id> <category>updating</category><body package="Nagare-VW-Core" selector="update:">update: anAspect	anAspect = #aboutToQuit ifTrue: [self shutDown: true].</body></methods><methods><class-id>NgVwPortableUtil class</class-id> <category>class initialization</category><body package="Nagare-VW-Core" selector="initialize">initialize	self activate.	self initDefault</body></methods><methods><class-id>NgMockPortableUtil</class-id> <category>accessing</category><body package="NagareTest-Core" selector="bytesSent">bytesSent	^bytesSent ifNil: [bytesSent := OrderedCollection new]</body><body package="NagareTest-Core" selector="delegate">delegate	^delegate ifNil: [delegate := NgPortableUtil defaultActualClass new]</body><body package="NagareTest-Core" selector="unixTimeSeconds">unixTimeSeconds	^ self delegate unixTimeSeconds</body></methods><methods><class-id>NgMockPortableUtil</class-id> <category>converting</category><body package="NagareTest-Core" selector="errorRecordFrom:">errorRecordFrom: anException	^self delegate errorRecordFrom: anException </body><body package="NagareTest-Core" selector="shortStackStringFrom:">shortStackStringFrom: anException	^self delegate shortStackStringFrom: anException</body></methods><methods><class-id>NgMockPortableUtil</class-id> <category>initialize-release</category><body package="NagareTest-Core" selector="initialize">initialize	super initialize.	delegate := nil.	bytesSent := nil</body><body package="NagareTest-Core" selector="release">release	super release	delegate ifNotNil: [delegate release].	delegate := nil.	bytesSent := nil</body></methods><methods><class-id>NgMockPortableUtil</class-id> <category>sending</category><body package="NagareTest-Core" selector="sendBytes:">sendBytes: bytes	self bytesSent add: bytes</body></methods><methods><class-id>NgMockPortableUtil class</class-id> <category>actions</category><body package="NagareTest-Core" selector="beDefault">beDefault	NgPortableUtil default release.	NgPortableUtil initDefault.	self activate.</body><body package="NagareTest-Core" selector="releaseDefault">releaseDefault	NgPortableUtil default release.	NgPortableUtil initDefault.	NgPortableUtil defaultActualClass activate</body></methods><methods><class-id>NgSettings</class-id> <category>actions-dictionary</category><body package="Nagare-Core" selector="at:">at: key	^self settingsDict at: key</body><body package="Nagare-Core" selector="at:ifAbsent:">at: key ifAbsent: aBlock	^self settingsDict at: key ifAbsent: aBlock</body><body package="Nagare-Core" selector="at:ifAbsentPut:">at: key ifAbsentPut: aBlock	^self settingsDict at: key ifAbsentPut: aBlock</body><body package="Nagare-Core" selector="at:put:">at: key put: value	^self settingsDict at: key put: value</body><body package="Nagare-Core" selector="includesKey:">includesKey: key	^self settingsDict includesKey: key</body><body package="Nagare-Core" selector="keys">keys	^self settingsDict keys</body></methods><methods><class-id>NgSettings</class-id> <category>accessing</category><body package="Nagare-Core" selector="debugOn">debugOn	^self at: #debugOn ifAbsentPut: [true]</body><body package="Nagare-Core" selector="debugOn:">debugOn: aBoolean	^self at: #debugOn put: aBoolean == true</body><body package="Nagare-Core" selector="defaultTagPrefix">defaultTagPrefix	^self at: #defaultTagPrefix ifAbsentPut: ['st']</body><body package="Nagare-Core" selector="defaultTagPrefix:">defaultTagPrefix: aString	^self at: #defaultTagPrefix put: aString</body><body package="Nagare-Core" selector="fatalClasses">fatalClasses	^self at: #fatalClasses ifAbsentPut: [Set new]</body><body package="Nagare-Core" selector="fatalClasses:">fatalClasses: aSet	^self at: #fatalClasses put: aSet</body><body package="Nagare-Core" selector="heartbeatInterval">heartbeatInterval	^self at: #heartbeatInterval ifAbsentPut: [1]</body><body package="Nagare-Core" selector="heartbeatInterval:">heartbeatInterval: anInteger	^self at: #heartbeatInterval put: anInteger</body><body package="Nagare-Core" selector="host">host	^self at: #host ifAbsentPut: ['localhost']</body><body package="Nagare-Core" selector="host:">host: hostAddressString	NgLog release.	^self at: #host put: hostAddressString</body><body package="Nagare-Core" selector="limitedStringSize">limitedStringSize	^self at: #limitedStringSize ifAbsentPut: [40]</body><body package="Nagare-Core" selector="limitedStringSize:">limitedStringSize: anInteger	^self at: #limitedStringSize put: anInteger</body><body package="Nagare-Core" selector="logLevel">logLevel	^self at: #logLevel ifAbsentPut: [5]</body><body package="Nagare-Core" selector="logLevel:">logLevel: anInteger	^self at: #logLevel put: anInteger</body><body package="Nagare-Core" selector="port">port	^self at: #port ifAbsentPut: [24224]</body><body package="Nagare-Core" selector="port:">port: anInteger	NgLog release.	^self at: #port put: anInteger</body><body package="Nagare-Core" selector="useStomp">useStomp	^self at: #useStomp ifAbsentPut: [false]</body><body package="Nagare-Core" selector="useStomp:">useStomp: aBoolean	^self at: #useStomp put: aBoolean == true</body><body package="Nagare-Core" selector="warningClasses">warningClasses	^self at: #warningClasses ifAbsentPut: [Set new]</body><body package="Nagare-Core" selector="warningClasses:">warningClasses: aSet	^self at: #warningClasses put: aSet</body></methods><methods><class-id>NgSettings</class-id> <category>class initialization</category><body package="Nagare-Core" selector="initialize">initialize	settingsDict := nil</body></methods><methods><class-id>NgSettings</class-id> <category>accessing-private</category><body package="Nagare-Core" selector="settingsDict">settingsDict	^ settingsDict ifNil: [settingsDict := IdentityDictionary new]</body></methods><methods><class-id>NgSettings class</class-id> <category>instance creation</category><body package="Nagare-Core" selector="default">default	default ifNil: [default := self new].	^default</body></methods><methods><class-id>NgSettings class</class-id> <category>class initialization</category><body package="Nagare-Core" selector="initialize">initialize	default := nil</body></methods><methods><class-id>NgLogPolicy</class-id> <category>accessing</category><body package="Nagare-Core" selector="logLevel">logLevel	^self settings logLevel</body><body package="Nagare-Core" selector="logger">logger	"Answer the value of logger"	^ logger</body><body package="Nagare-Core" selector="logger:">logger: anObject	"Set the value of logger"	logger := anObject</body><body package="Nagare-Core" selector="settings">settings	^self logger settings</body></methods><methods><class-id>NgLogPolicy</class-id> <category>testing</category><body package="Nagare-Core" selector="consideredAsFatal:">consideredAsFatal: anException	(self settings fatalClasses includes: anException) ifTrue: [^true].	^ false</body><body package="Nagare-Core" selector="consideredAsWarning:">consideredAsWarning: anException	(self settings warningClasses includes: anException) ifTrue: [^true].	^ anException isKindOf: Warning</body><body package="Nagare-Core" selector="shouldLogAccess">shouldLogAccess	^self logLevel &gt;= 5</body><body package="Nagare-Core" selector="shouldLogAdmin">shouldLogAdmin	^self logLevel &gt;= 2</body><body package="Nagare-Core" selector="shouldLogDebug">shouldLogDebug	^self logLevel &gt;= 3</body><body package="Nagare-Core" selector="shouldLogError">shouldLogError	^self logLevel &gt;= 1</body><body package="Nagare-Core" selector="shouldLogFatal">shouldLogFatal	^self logLevel &gt;= 1</body><body package="Nagare-Core" selector="shouldLogInfo">shouldLogInfo	^self logLevel &gt;= 4</body><body package="Nagare-Core" selector="shouldLogProfile">shouldLogProfile	^self logLevel &gt;= 3</body><body package="Nagare-Core" selector="shouldLogWarn">shouldLogWarn	^self logLevel &gt;= 2</body></methods><methods><class-id>NgLogPolicy</class-id> <category>actions</category><body package="Nagare-Core" selector="logException:">logException: anException	(self consideredAsFatal: anException) ifTrue: [^self logger fatal: anException].	(self consideredAsWarning: anException) ifTrue: [^self logger warn: anException].	self logger error: anException</body></methods><methods><class-id>NgLogPolicy class</class-id> <category>instance creation</category><body package="Nagare-Core" selector="on:">on: logger	^self new logger: logger; yourself</body></methods><methods><class-id>NgNetworkError</class-id> <category>accessing</category><body package="Nagare-Core" selector="originalError">originalError	"Answer the value of originalError"	^ originalError</body><body package="Nagare-Core" selector="originalError:">originalError: anObject	"Set the value of originalError"	originalError := anObject</body></methods><methods><class-id>NgNetworkError class</class-id> <category>instance creation</category><body package="Nagare-Core" selector="originalError:">originalError: origError	^self new originalError: origError; yourself</body></methods><methods><class-id>NgLogFactory class</class-id> <category>removing</category><body package="Nagare-Core" selector="removeKey:ifAbsent:">removeKey: tagPrefix ifAbsent: aBlock	^self loggers removeKey: tagPrefix ifAbsent: aBlock </body></methods><methods><class-id>NgLogFactory class</class-id> <category>instance creation</category><body package="Nagare-Core" selector="@">@ tagPrefix 	^self logger: tagPrefix	</body><body package="Nagare-Core" selector="at:ifAbsentPut:">at: tagPrefix ifAbsentPut: aBlock	^self at: tagPrefix ifAbsentPut: aBlock initialized: nil</body><body package="Nagare-Core" selector="at:ifAbsentPut:initialized:">at: tagPrefix ifAbsentPut: aBlock initialized: initializer	^ self loggers at: tagPrefix ifAbsentPut: [ | newLogger |		newLogger := aBlock value.		initializer ifNotNil: [initializer value: newLogger].		newLogger	] </body><body package="Nagare-Core" selector="defaultLogger">defaultLogger 	^self logger: NgSettings default defaultTagPrefix	</body><body package="Nagare-Core" selector="logger:">logger: tagPrefix 	^self at: tagPrefix ifAbsentPut: [NgLog tagPrefix: tagPrefix].	</body></methods><methods><class-id>NgLogFactory class</class-id> <category>accessing</category><body package="Nagare-Core" selector="loggers">loggers	loggers ifNil: [loggers := Dictionary new].	^loggers</body></methods><methods><class-id>NgLogFactory class</class-id> <category>class initialization</category><body package="Nagare-Core" selector="initialize">initialize	"NgLogFactory initialize"	loggers := nil</body></methods><methods><class-id>NgLog</class-id> <category>accessing</category><body package="Nagare-Core" selector="accessTag">accessTag	"Answer the value of accessTag"	^ accessTag</body><body package="Nagare-Core" selector="accessTag:">accessTag: anObject	"Set the value of accessTag"	accessTag := anObject</body><body package="Nagare-Core" selector="adminTag">adminTag	"Answer the value of adminTag"	^ adminTag</body><body package="Nagare-Core" selector="adminTag:">adminTag: anObject	"Set the value of adminTag"	adminTag := anObject</body><body package="Nagare-Core" selector="debugTag">debugTag	"Answer the value of debugTag"	^ debugTag</body><body package="Nagare-Core" selector="debugTag:">debugTag: anObject	"Set the value of debugTag"	debugTag := anObject</body><body package="Nagare-Core" selector="errorTag">errorTag	"Answer the value of errorTag"	^ errorTag</body><body package="Nagare-Core" selector="errorTag:">errorTag: anObject	"Set the value of errorTag"	errorTag := anObject</body><body package="Nagare-Core" selector="fatalTag">fatalTag	"Answer the value of fatalTag"	^ fatalTag</body><body package="Nagare-Core" selector="fatalTag:">fatalTag: anObject	"Set the value of fatalTag"	fatalTag := anObject</body><body package="Nagare-Core" selector="infoTag">infoTag	"Answer the value of infoTag"	^ infoTag</body><body package="Nagare-Core" selector="infoTag:">infoTag: anObject	"Set the value of infoTag"	infoTag := anObject</body><body package="Nagare-Core" selector="perfTag">perfTag	"Answer the value of perfTag"	^ perfTag</body><body package="Nagare-Core" selector="perfTag:">perfTag: anObject	"Set the value of perfTag"	perfTag := anObject</body><body package="Nagare-Core" selector="policy">policy	policy ifNil: [policy := NgLogPolicy on: self].	^ policy</body><body package="Nagare-Core" selector="policy:">policy: anObject	"Set the value of policy"	policy := anObject</body><body package="Nagare-Core" selector="portableUtil">portableUtil	^NgPortableUtil default</body><body package="Nagare-Core" selector="settings">settings	^settings ifNil: [settings := NgSettings default]</body><body package="Nagare-Core" selector="settings:">settings: anObject	"Set the value of policy"	settings := anObject</body><body package="Nagare-Core" selector="tagPrefix">tagPrefix	tagPrefix ifNil: [tagPrefix := self settings defaultTagPrefix].	^ tagPrefix</body><body package="Nagare-Core" selector="tagPrefix:">tagPrefix: anObject	"Set the value of tagPrefix"	tagPrefix := anObject</body><body package="Nagare-Core" selector="warnTag">warnTag	"Answer the value of warnTag"	^ warnTag</body><body package="Nagare-Core" selector="warnTag:">warnTag: anObject	"Set the value of warnTag"	warnTag := anObject</body></methods><methods><class-id>NgLog</class-id> <category>encoding</category><body package="Nagare-Core" selector="asRecord:">asRecord: anObject	self settings useStomp ifTrue: [^ anObject].	^ self portableUtil asRecord: anObject</body><body package="Nagare-Core" selector="bytesToSendFrom:tagged:">bytesToSendFrom: record tagged: tag	| logMessage |	logMessage := self newLogMessage: tag record: (self asRecord: record).	^self encodeMessage: logMessage</body><body package="Nagare-Core" selector="encodeByMessagePack:">encodeByMessagePack: logMessage	"use plainer MP for encoding"	| enc |	enc := MpEncoder onBytes: (ByteArray new: 30).	enc settings stringAsBytes: true.	^enc encode: logMessage.</body><body package="Nagare-Core" selector="encodeByStomp:">encodeByStomp: logMessage	"use richer StOMP(Smalltalk Object MP) for encoding"	| enc |	enc := StompWriter onBytes: (ByteArray new: 50).	^enc encode: logMessage.</body><body package="Nagare-Core" selector="encodeMessage:">encodeMessage: logMessage	"logMessage =&gt; tag, timestamp, record"	self settings useStomp ifTrue: [^ self encodeByStomp: logMessage].	^self encodeByMessagePack: logMessage</body><body package="Nagare-Core" selector="newLogMessage:record:">newLogMessage: tag record: aRecord	| array |	array := Array new: 3.	array at: 1 put: tag asByteArray.	array at: 2 put: self portableUtil unixTimeSeconds.	array at: 3 put: aRecord.	^array</body></methods><methods><class-id>NgLog</class-id> <category>printing</category><body package="Nagare-Core" selector="printOn:">printOn: aStream	aStream nextPutAll: self class name.	aStream nextPutAll: ' ('.	aStream nextPutAll: self tagPrefix.	aStream nextPutAll: ')'.</body></methods><methods><class-id>NgLog</class-id> <category>initialize-release</category><body package="Nagare-Core" selector="initTags">initTags	#(accessTag adminTag debugTag fatalTag infoTag perfTag errorTag warnTag)		do: [:each | | tag |		tag := self tagPrefix, (self class perform: each). 		self perform: (each, ':') asSymbol with: tag	]</body><body package="Nagare-Core" selector="initialize">initialize	policy := settings := nil.	self initTags</body><body package="Nagare-Core" selector="release">release	NgLogFactory removeKey: self tagPrefix ifAbsent: [^self].	self initialize</body></methods><methods><class-id>NgLog</class-id> <category>logging-convenient</category><body package="Nagare-Core" selector="logException:">logException: anException	self policy logException: anException</body><body package="Nagare-Core" selector="logTimeToRun:at:">logTimeToRun: aBlock at: tracePoint	^ self logTimeToRun: aBlock at: tracePoint description: nil</body><body package="Nagare-Core" selector="logTimeToRun:at:description:">logTimeToRun: aBlock at: tracePoint description: description	| msecs |	msecs := [Time millisecondsToRun: aBlock] on: Error do: [:ex | ex ngLog. ^-1].	self timeConsumed: msecs at: tracePoint doing: description.	^ msecs</body><body package="Nagare-Core" selector="timeConsumed:at:doing:">timeConsumed: msecs at: tracePoint doing: description	| map |	map := Dictionary new.	map at: #msecs put: msecs.	map at: #tracePoint put: tracePoint.	description ifNotNil: [map at: #description put: description].	self perf: map</body></methods><methods><class-id>NgLog</class-id> <category>logging</category><body package="Nagare-Core" selector="access:">access: record	(self policy shouldLogAccess) ifFalse: [^self].	^self portableUtil sendLog: record tagged: self accessTag on: self</body><body package="Nagare-Core" selector="admin:">admin: record	(self policy shouldLogAdmin) ifFalse: [^self].	^self portableUtil sendLog: record tagged: self adminTag on: self</body><body package="Nagare-Core" selector="debug:">debug: exceptionOrRecord	| record |	(self policy shouldLogDebug) ifFalse: [^self].	record := self portableUtil errorRecordFrom: exceptionOrRecord.	^self portableUtil sendLog: record tagged: self debugTag on: self</body><body package="Nagare-Core" selector="error:">error: exceptionOrRecord	| record |	(self policy shouldLogError) ifFalse: [^self].	record := self portableUtil errorRecordFrom: exceptionOrRecord.	^self portableUtil sendLog: record tagged: self errorTag on: self</body><body package="Nagare-Core" selector="fatal:">fatal: exceptionOrRecord	| record |	(self policy shouldLogFatal) ifFalse: [^self].	record := self portableUtil errorRecordFrom: exceptionOrRecord.	^self portableUtil sendLog: record tagged: self fatalTag on: self</body><body package="Nagare-Core" selector="info:">info: record	(self policy shouldLogInfo) ifFalse: [^self].	^self portableUtil sendLog: record tagged: self infoTag on: self</body><body package="Nagare-Core" selector="perf:">perf: record	(self policy shouldLogProfile) ifFalse: [^self].	^self portableUtil sendLog: record tagged: self perfTag on: self</body><body package="Nagare-Core" selector="warn:">warn: exceptionOrRecord	| record |	(self policy shouldLogWarn) ifFalse: [^self].	record := self portableUtil errorRecordFrom: exceptionOrRecord.	^self portableUtil sendLog: record tagged: self warnTag on: self</body></methods><methods><class-id>NgLog</class-id> <category>comparing</category><body package="Nagare-Core" selector="=">= other	self class = other class ifFalse: [^false].	^ self tagPrefix = other tagPrefix</body><body package="Nagare-Core" selector="hash">hash	^ self class name hash bitXor: self tagPrefix hash</body></methods><methods><class-id>NgLog class</class-id> <category>preset tag types</category><body package="Nagare-Core" selector="accessTag">accessTag	^'.access'</body><body package="Nagare-Core" selector="adminTag">adminTag	^'.admin'</body><body package="Nagare-Core" selector="debugTag">debugTag	^'.debug'</body><body package="Nagare-Core" selector="errorTag">errorTag	^'.error'</body><body package="Nagare-Core" selector="fatalTag">fatalTag	^'.fatal'</body><body package="Nagare-Core" selector="infoTag">infoTag	^'.info'</body><body package="Nagare-Core" selector="perfTag">perfTag	^'.perf'</body><body package="Nagare-Core" selector="warnTag">warnTag	^'.warn'</body></methods><methods><class-id>NgLog class</class-id> <category>class initialization</category><body package="Nagare-Core" selector="initialize">initialize	"NgLog initialize"	default := nil</body><body package="Nagare-Core" selector="release">release	"NgLog release"	NgPortableUtil release</body></methods><methods><class-id>NgLog class</class-id> <category>instance creation</category><body package="Nagare-Core" selector="default">default	"NgLog default"	default ifNil: [default := NgLogFactory defaultLogger].	^default</body><body package="Nagare-Core" selector="tagPrefix:">tagPrefix: tagPrefix	^self basicNew tagPrefix: tagPrefix; initialize; yourself</body></methods><methods><class-id>NgLogTest</class-id> <category>private</category><body package="NagareTest-Core" selector="asString:">asString: anObject	"For VW"	(anObject isKindOf: String) ifTrue: [^anObject asString].	(anObject isKindOf: ByteArray) ifTrue: [^anObject asString].	^ anObject printString</body><body package="NagareTest-Core" selector="asStringDictionary:">asStringDictionary: bytesDict 	| dict |	dict := Dictionary new.	bytesDict		keysAndValuesDo: [:k :v | dict at: k asString put: (self asString: v)].	^ dict</body><body package="NagareTest-Core" selector="logs">logs	| messages mpBytesCol |	mpBytesCol := NgPortableUtil default bytesSent.	messages := self ng settings useStomp				ifTrue: [mpBytesCol						collect: [:each | Object fromStomp: each]]				ifFalse: [mpBytesCol						collect: [:each | MpMessagePack unpack: each]].	^ messages		collect: [:each | 			each at: 1 put: (each at: 1) asString.			each]</body></methods><methods><class-id>NgLogTest</class-id> <category>testing</category><body package="NagareTest-Core" selector="testAccess">testAccess	| logs |	"self debug: #testAccess"	self ng access: 'test1'.	self ng access: 222.	logs := self logs.	self assert: logs size = 2.	self assert: ((logs at: 1) at: 1) = self ng accessTag.	self assert: ((logs at: 2) at: 1) = self ng accessTag.		self assert: ((logs at: 1) at: 3) = 'test1' asByteArray.	self assert: ((logs at: 2) at: 3) = 222</body><body package="NagareTest-Core" selector="testAdmin">testAdmin	| logs |	"self debug: #testAdmin"	self ng admin: 'test1'.	self ng admin: 222.	logs := self logs.	self assert: logs size = 2.	self assert: ((logs at: 1) at: 1) = self ng adminTag.	self assert: ((logs at: 2) at: 1) = self ng adminTag.		self assert: ((logs at: 1) at: 3) = 'test1' asByteArray.	self assert: ((logs at: 2) at: 3) = 222</body><body package="NagareTest-Core" selector="testComprexLog">testComprexLog	"self debug: #testComprexLog"	"Log arbitrary complex records"	"Requires StOMP"		| logs origRecord retrievedRecord |	self assert: (Object canUnderstand: #toStomp).	self ng settings: (NgSettings new useStomp: true; yourself).		self ng debug: 'test1'.	self ng info: #test2 -&gt; 222.	origRecord := Array with: #test3-&gt;3.14 with: (#time -&gt; Time now) with: (#date -&gt; Date today).	self ng fatal: origRecord.		logs := self logs.		self assert: logs size = 3.	self assert: ((logs at: 1) at: 1) = self ng debugTag.	self assert: ((logs at: 2) at: 1) = self ng infoTag.	self assert: ((logs at: 3) at: 1) = self ng fatalTag.		self assert: ((logs at: 1) at: 3) = 'test1'.	self assert: ((logs at: 2) at: 3) = (#test2 -&gt; 222).	retrievedRecord := ((logs at: 3) at: 3).	self assert: retrievedRecord size = origRecord size.	self assert: (retrievedRecord at: 1) = (origRecord at: 1).	self assert: (retrievedRecord at: 2) key = (origRecord at: 2) key.	self assert: (retrievedRecord at: 2) value asSeconds = (origRecord at: 2) value asSeconds.	self assert: (retrievedRecord at: 3) key = (origRecord at: 3) key.	self assert: (retrievedRecord at: 3) value asSeconds = (origRecord at: 3) value asSeconds.		self ng settings: nil</body><body package="NagareTest-Core" selector="testDebug">testDebug	| logs |	"self debug: #testDebug"		self ng debug: 'test1'.	self ng debug: 222.	logs := self logs.	self assert: logs size = 2.	self assert: ((logs at: 1) at: 1) = self ng debugTag.	self assert: ((logs at: 2) at: 1) = self ng debugTag.		self assert: ((logs at: 1) at: 3) = 'test1' asByteArray.	self assert: ((logs at: 2) at: 3) = 222</body><body package="NagareTest-Core" selector="testExceptionLog">testExceptionLog	"self debug: #testExceptionLog"		| errorInfo |	[1 add: 0] on: Error do: [:ex | ex ngLog].		self assert: self logs size = 1.	self assert: ((self logs at: 1) at: 1) = self ng errorTag.		errorInfo := self asStringDictionary: ((self logs at: 1) at: 3).		self assert:  (errorInfo at: 'receiver') = '1'.	self assert:  (errorInfo includesKey: 'description').	self assert:  (errorInfo includesKey: 'stack')</body><body package="NagareTest-Core" selector="testInfo">testInfo	| logs |	"self debug: #testInfo"	self ng info: 'test1'.	self ng info: 222.	logs := self logs.	self assert: logs size = 2.	self assert: ((logs at: 1) at: 1) = self ng infoTag.	self assert: ((logs at: 2) at: 1) = self ng infoTag.		self assert: ((logs at: 1) at: 3) = 'test1' asByteArray.	self assert: ((logs at: 2) at: 3) = 222</body><body package="NagareTest-Core" selector="testLogLevelZero">testLogLevelZero	"self debug: #testLogLevelZero"	self ng settings: (NgSettings new logLevel: 0; yourself).	self ng debug: 'test1'.	self ng debug: 222.		self assert: self logs size = 0.		self ng settings: nil</body><body package="NagareTest-Core" selector="testPerfLog">testPerfLog	"self debug: #testPerfLog"	| msecs errorInfo |	msecs := [1000 factorial] ngLogTimeAt: '10000 factorial' description: 'testPerfLog'.		self assert: self logs size = 1.	self assert: ((self logs at: 1) at: 1) = self ng perfTag.	errorInfo := self asStringDictionary: ((self logs at: 1) at: 3).		self assert:  (errorInfo at: 'msecs') = msecs printString.	self assert:  (errorInfo at: 'tracePoint') = '10000 factorial'.	self assert:  (errorInfo at: 'description') = 'testPerfLog'.</body><body package="NagareTest-Core" selector="testPrefix">testPrefix	| logs |	"self debug: #testPrefix"	self &gt;@ 'myApp' access: 'test1'.	self ng info: 222.	self &gt;@ 'myApp'  info: 333.		logs := self logs.	self assert: logs size = 3.	self assert: ((logs at: 1) at: 1) = (self &gt;@ 'myApp') accessTag.	self assert: ((logs at: 2) at: 1) = (self ng) infoTag.	self assert: ((logs at: 3) at: 1) = (self &gt;@ 'myApp') infoTag.		self assert: ((logs at: 1) at: 3) = 'test1' asByteArray.	self assert: ((logs at: 2) at: 3) = 222.	self assert: ((logs at: 3) at: 3) = 333.		(self &gt;@ 'myApp') release</body></methods><methods><class-id>NgLogTest</class-id> <category>running</category><body package="NagareTest-Core" selector="setUp">setUp	NgMockPortableUtil beDefault</body><body package="NagareTest-Core" selector="tearDown">tearDown	NgMockPortableUtil releaseDefault</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>*Nagare-Core</category><body package="Nagare-Core" selector="ngLogTime">ngLogTime	^ self ngLogTimeAt: thisContext sender printString</body><body package="Nagare-Core" selector="ngLogTimeAt:">ngLogTimeAt: tracePoint	^ self ng logTimeToRun: self at: tracePoint.	</body><body package="Nagare-Core" selector="ngLogTimeAt:description:">ngLogTimeAt: tracePoint description: description	^ self ng logTimeToRun: self at: tracePoint description: description.	</body></methods><methods><class-id>Core.Object</class-id> <category>*Nagare-Core-accessing</category><body package="Nagare-Core" selector="&gt;@">&gt;@ tagPrefix	"Access to application prefixed logger"	^ NgLogFactory @ tagPrefix </body><body package="Nagare-Core" selector="ng">ng	"Access to system default logger"	^NgLog default</body></methods><methods><class-id>Core.Exception</class-id> <category>*Nagare-Core</category><body package="Nagare-Core" selector="ngLog">ngLog	self ng logException: self.	^self</body></methods><initialize><class-id>NgPortableUtil</class-id></initialize><initialize><class-id>NgVwPortableUtil</class-id></initialize><initialize><class-id>NgSettings</class-id></initialize><initialize><class-id>NgLogFactory</class-id></initialize><initialize><class-id>NgLog</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Exception</name><environment>Core</environment><super>Core.GenericException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>